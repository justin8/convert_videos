name: Workflow

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ["3.8", "3.9", "3.10"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        run: |
          pip install poetry
          poetry install
          poetry build
      - name: Run linting
        run: |
          ./lint.sh
      - name: Run tests
        run: |
          ./test.sh
      - name: Upload code coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          bash <(curl -s https://codecov.io/bash) -Z || echo 'Codecov failed to upload'

  tag-releases:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    outputs:
      new_version: ${{ steps.tag_releases.outputs.new_version }}
    steps:
      - uses: actions/checkout@v3
      - name: Tag Releases
        id: tag_releases
        run: |
          version="$(grep -Po "(?<=^version = \")[0-9\.]+" pyproject.toml)"
          echo "Current version: '$version'"
          if git ls-remote --tags origin | grep "${version}$"; then
            echo Current version has already been tagged. Skipping
          else
            echo Version has been updated. Tagging.
            git tag $version
            echo "new_version=$version" >> $GITHUB_OUTPUT
          fi
      - name: Push Tags
        run: |
          branch=${GITHUB_REF_NAME}
          if [[ $branch == master ]]; then
            echo "Pushing tags..."
            git push --tags || :
          else
            echo "Skipping pushing tags as this is not the master branch"
          fi

  publish:
    runs-on: ubuntu-latest
    needs: [test, tag-releases]
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Build
        run: |
          branch=${GITHUB_REF_NAME}
          new_version=${{ needs.tag-releases.outputs.new_version }}
          if [[ $branch != master ]] || [[ ! $new_version ]]; then
            echo "Not publishing changes outside master branch or when no version update has occurred"
            exit 0
          fi
          pip install poetry
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry install
          poetry build
      - name: Publish
        run: |
          branch=${GITHUB_REF_NAME}
          new_version=${{ needs.tag-releases.outputs.new_version }}
          if [[ $branch != master ]] || [[ ! $new_version ]]; then
            echo "Not publishing changes outside master branch or when no version update has occurred"
            exit 0
          fi
          poetry publish
